{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","say","setSay","useSpeechRecognition","transcript","resetTranscript","listening","browserSupportsSpeechRecognition","useEffect","SpeechRecognition","startListening","continuous","className","placeholder","onChange","e","target","value","onClick","window","responsiveVoice","speak","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAmCeA,EA9BL,WAER,MAAmBC,mBAAS,IAA5B,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAKIC,iCAJFC,EADF,EACEA,WAEAC,GAHF,EAEEC,UAFF,EAGED,iBAHF,EAIEE,iCAUF,OAPFC,qBAAU,WADqBC,IAAkBC,eAAe,CAAEC,YAAY,OAS1E,sBAAKC,UAAU,MAAf,UAEE,uBACD,iDAAwB,uBACxB,uCAAS,mBAAGA,UAAU,aAAb,SAA2BR,OACnC,uBAAOS,YAAY,cAAcC,SAAU,SAACC,GAAD,OAAKb,EAAOa,EAAEC,OAAOC,UACjE,uBAAK,uBANN,IAMY,wBAAQC,QAASb,EAAjB,uBAChB,wBAAQa,QAAS,kBAAIC,OAAOC,gBAAgBC,MAAMpB,IAAlD,qBClBeqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5fb1c5f3.chunk.js","sourcesContent":["import {useState,useEffect} from \"react\"\nimport './App.css';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n\nconst App=()=> {\n\n  const [say,setSay]=useState(\"\")\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const startListening = () => SpeechRecognition.startListening({ continuous: true });\nuseEffect(()=>{\n  startListening()\n  \n})\n\n\n\n  return (\n    <div className=\"App\">\n      \n      <br/>\n     <h1>claps assistive</h1><br/>\n     <center> <p className=\"transcript\">{transcript}</p></center>\n      <input placeholder=\"type to say\" onChange={(e)=>setSay(e.target.value)}/>\n     <br/><br/> <button onClick={resetTranscript}>Reset ear</button>\n<button onClick={()=>window.responsiveVoice.speak(say)}>say</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}